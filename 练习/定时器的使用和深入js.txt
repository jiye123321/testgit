数码时钟

获取系统时间
 -Date对象
 -getHours,getMinutes,getSeconds

----------------------------------------------
显示系统时间
 -字符串连接
 -空位补零

----------------------------------------------
设置图片的路径
 -charAt方法

str[i]在低版本中不兼容

str.charAt(i) 改成这个

----------------------------------------------
date对象其他方法

年
 -getFullYear()
月
 -getMonth()+1          //+1 
日
 -getDate()
星期
 getDay()

----------------------------------------------

var oDate=new Date();

alert(oDate.getFullYear());


----------------------------------------------
间隔按钮
setInterval（事件，延迟多少毫秒）（执行很多次）

清除间隔
clearTimeout(事件)

----------------------------------------------

延时按钮：
setTimeout（事件，延迟多少毫秒）（只执行一次）

清除延迟：
clearTimeout(事件)


----------------------------------------------
无缝滚动-基础

物体运动基础
 -让div移动起来
 -offsetLeft的作用    （能够综合考虑离左边的距离）
 -用定时器让物体连续移动
----------------------------------------------

offsetLeft   offsetTop


offsetWidth   offsetHeight

----------------------------------------------
无缝滚动-扩展
 改变滚动方向
   -修改speed
   -修改判断条件
 鼠标移入暂停
   -移入关闭定时器
   -移除重新开启定时器


=================================================================







函数返回值：return  一次只能返回一个
  -函数的执行结果
  -可以没有return
一个函数应该只返回一个类型的值
-------------------------------------------------------------

arguments          可变参数  不定参数
-参数的个数可变 参数数组



-------------------------------------------------------------
css(oDiv,'width')       获取样式
css(oDiv,'width','200px')   设置样式

-------------------------------------------------------------
取非行间样式（只能取单一样式）
getComputedStyle（obj,false）[attr]    //attr   属性

obj.currentStyle[attr]



复合样式：border，，，

单一样式：width，height，，，，

-------------------------------------------------------------
function getStyle(obj,name)
{
	if(obj.currentStyle)
	{
		return obj.currentStyle[name];
	}
	else
	{
		return getComputedStyle(obj,false)[name];
	}
}


公共js




-------------------------------------------------------------
数组基础

定义
-var arr=[1,2,3]

-var arr=new Array(12,5,2,5);
没有任何差别。[]的性能略高，因为代码短


-------------------------------------------------------------
数组的length
-既可以获取，又可以设置    arr.length=3;
  例子：快速清空数组        arr.length=0;


-------------------------------------------------------------
数组使用原则：数组中应该只存一种类型的变量

-------------------------------------------------------------
数组的添加和删除
 添加
	push(元素)   从尾部添加
	unshift(元素)  从头部添加
 删除
	pop(),从尾部弹出
	shift() 从头部弹出


-------------------------------------------------------------
插入，删除

删除元素  splice(起点，长度)

var arr=[1,2,3,4,5,6];

//删除元素  splice(起点，长度)

arr.splice(2,3)
alert(arr);

//得到的为  1,2,6


//插入元素  splice(起点，长度，元素。。。)

arr.splice(2,2,'a','b','c');

//得到的为   1,2，a,b,c,5,6    就是说先删了2个，再在第二个位置添加进去


-------------------------------------------------------------
数组连接
var a=[1,2,3];
var b=[4,5,6];

alert(a,concat(b));

//得到的就是 1,2，3,4,5,6


alert(b,concat(a));

//得到的就是 4,5,6,1,2，3




join

var arr=[1,2,3,4]

alert(arr.join('-'));    //join中间随便放什么

得到的就是

1-2-3-4

数组里的元素变成字符串   


-------------------------------------------------------------
排序和转换
-排序
	sort(比较函数)


-------------------------------------------------------------
var arr=['float','width','alpha','zoom'];

arr.sort();

alert(arr);

//得到的就是按首字母排序


当时数字的时候


一种错误的示范  -----------

var arr=[12,8,99,19,122];

arr.sort();

alert(arr);


//得到的是：12 122 19 8 99       会按首字母排序



一种正确的示范  -----------

var arr=[12,8,99,19,122];

arr.sort(function(n1,n2){
	if
 	  (n1<n2)
	     {return -1;}
	else if
           (n1>n2)
	      {return 1;}
	else
	      {return 0;}
		
});

alert(arr);


另一种正确的示范  -----------


var arr=[12,8,99,19,122];

arr.sort(function(n1,n2){
	return n1-n2;
		
});

alert(arr);


得到：8 12 19 99 122
、































